      
$appList = @(
    @{
        'OSType'  = 'Windows'
        'AppName' = 'Google Drive'
    },
    @{
        'OSType'  = 'macOS'
        'AppName' = 'Google Drive'
    }
)
Function Get-DynamicHash ()
{
    [CmdletBinding()]
    param (
        [Parameter(Position = 0, Mandatory = $true)][ValidateSet('System', 'User', 'Command', 'Group')][string]$Object,
        [Parameter(Position = 1, Mandatory = $true)][ValidateNotNullOrEmpty()][string[]]$returnProperties
    )
    DynamicParam
    {
        if ($Object -eq 'Group')
        {
            $paramDictionary = New-Object -Type System.Management.Automation.RuntimeDefinedParameterDictionary
            $paramAttributesCollect = New-Object -Type System.Collections.ObjectModel.Collection[System.Attribute]
            $paramAttributes = New-Object -Type System.Management.Automation.ParameterAttribute
            $paramAttributes.Mandatory = $true
            $paramAttributesCollect.Add($paramAttributes)
            $paramAttributesCollect.Add((New-Object -Type System.Management.Automation.ValidateSetAttribute('System', 'User')))
            $dynParam1 = New-Object -Type System.Management.Automation.RuntimeDefinedParameter("GroupType", [string], $paramAttributesCollect)
            $paramDictionary.Add("GroupType", $dynParam1)
            return $paramDictionary
        }
    }
    begin
    {
        $GroupType = $PSBoundParameters['GroupType']
        $DynamicHash = New-Object System.Collections.Hashtable
    }
    process
    {
        switch ($Object)
        {
            System
            {
                Write-Debug "Generating ResultsHash"
                $ResultsHash = Get-JCSystem -returnProperties $returnProperties
            }
            User
            {
                Write-Debug "Generating ResultsHash"
                $ResultsHash = Get-JCUser -returnProperties $returnProperties
            }
            Command
            {
                Write-Debug "Generating ResultsHash"
                $ResultsHash = Get-JCCommand -returnProperties $returnProperties
            }
            Group
            {
                Write-Debug "Generating ResultsHash"
                $returnProperties += "id"
                switch ($GroupType)
                {
                    System
                    {
                        $ResultsHash = Get-JCGroup -Type System | Select-Object -Property $returnProperties
                    }
                    User
                    {
                        $ResultsHash = Get-JCGroup -Type User | Select-Object -Property $returnProperties
                    }
                }
            }
        }
        Write-Debug "Adding results to hashtable"
        foreach ($Result in $ResultsHash)
        {
            if ($Result.id)
            {
                $DynamicHash.Add($Result.id, @($Result | Select-Object -ExcludeProperty 'id'))
            }
            else
            {
                $DynamicHash.Add($Result._id, @($Result | Select-Object -ExcludeProperty '_id'))
            }
        }
    }
    end
    {
        return $DynamicHash
    }
}
$systems = Get-DynamicHash -Object System -returnProperties hostname
$ResultList = New-Object System.Collections.ArrayList
foreach ($item in $appList)
{
    $results = Get-JCSystemApp -SystemOS $item.OSType -name $item.AppName
    foreach ($result in $results)
    {
        $ResultList.add($result) | out-null
    }
}
$CSVResult = New-Object System.Collections.ArrayList
# Create a counter to show progress
$counter = 0
$totalCount = $ResultList.count
foreach ($item in $ResultList)
{
    $Counter += 1
    $p = ($counter / $totalCount) * 100
    $p = [math]::round($p)
    # Show for loop progress
    Write-Progress -Activity "Getting System Membership and app details" -Status "$p% Complete:" -PercentComplete $p
    $boundUsers = Get-JCSystemUser -SystemID $item.SystemId
    $CSVResult.Add(
        [PSCustomObject]@{
            systemID    = $item.SystemId
            hostname    = $systems[$($item.SystemId)].hostname
            Users       = $boundUsers.username | Out-String
            Application = $item.Name
            Version     = if ($item.version)
            {
                $item.Version
            }
            elseif ($item.bundleShortVersion)
            {
                $item.bundleShortVersion
            }
            Path        = if ($item.InstallLocation)
            {
                $item.InstallLocation
            }
            elseif ($item.Path)
            {
                $item.Path
            }
        }
    ) | out-null
}
$CSVResult | convertto-CSV | out-file ~/downloads/careemApps.csv
open ~/downloads/apps.csv
